Model already exists: ../sfd-main/src/cifar10/edm-cifar10-32x32-uncond-vp.pkl
Loading the pre-trained diffusion model from "../sfd-main/src/cifar10/edm-cifar10-32x32-uncond-vp.pkl"...
/home/zeus/miniconda3/envs/cloudspace/lib/python3.9/site-packages/torch/distributed/distributed_c10d.py:4631: UserWarning: No device id is provided via `init_process_group` or `barrier `. Using the current device set by the user. 
  warnings.warn(  # warn only once
Total parameters in U-Net:      60396419
Setting up optimizer...
Training for 1 kimg...

for now denoised is of shape [B, C, H, W] we will copy it to [B, num_future_steps, C, H, W]
torch.Size([128, 3, 32, 32])   shape for denoised_multistep
torch.Size([128, 4, 3, 32, 32])   shape for denoised_multistep after repeat
[rank0]: Traceback (most recent call last):
[rank0]:   File "/teamspace/studios/this_studio/sfd-main/train.py", line 155, in <module>
[rank0]:     main()
[rank0]:   File "/home/zeus/miniconda3/envs/cloudspace/lib/python3.9/site-packages/click/core.py", line 1161, in __call__
[rank0]:     return self.main(*args, **kwargs)
[rank0]:   File "/home/zeus/miniconda3/envs/cloudspace/lib/python3.9/site-packages/click/core.py", line 1082, in main
[rank0]:     rv = self.invoke(ctx)
[rank0]:   File "/home/zeus/miniconda3/envs/cloudspace/lib/python3.9/site-packages/click/core.py", line 1443, in invoke
[rank0]:     return ctx.invoke(self.callback, **ctx.params)
[rank0]:   File "/home/zeus/miniconda3/envs/cloudspace/lib/python3.9/site-packages/click/core.py", line 788, in invoke
[rank0]:     return __callback(*args, **kwargs)
[rank0]:   File "/teamspace/studios/this_studio/sfd-main/train.py", line 150, in main
[rank0]:     training_loop.training_loop(**c)
[rank0]:   File "/teamspace/studios/this_studio/sfd-main/training/training_loop.py", line 310, in training_loop
[rank0]:     loss_norm = torch.norm(loss, p=2, dim=(1,2,3))
[rank0]:   File "/home/zeus/miniconda3/envs/cloudspace/lib/python3.9/site-packages/torch/functional.py", line 1849, in norm
[rank0]:     return torch.linalg.vector_norm(input, _p, _dim, keepdim, dtype=dtype)
[rank0]: IndexError: Dimension out of range (expected to be in range of [-1, 0], but got 1)
